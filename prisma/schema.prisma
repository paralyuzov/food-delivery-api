// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Customer relations
  addresses         Address[]
  orders            Order[]
  restaurantRatings RestaurantRating[]
  dishRatings       DishRating[]

  // Admin relations (only for ADMIN users)
  managedRestaurants Restaurant[] @relation("RestaurantManager")

  @@map("users")
}

model Address {
  id           String  @id @default(cuid())
  userId       String
  street       String
  city         String
  state        String
  zipCode      String
  country      String  @default("US")
  isDefault    Boolean @default(false)
  instructions String?

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Restaurant {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  phone       String
  email       String?
  imageUrl    String?
  isActive    Boolean  @default(true)
  managerId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  manager User @relation("RestaurantManager", fields: [managerId], references: [id])

  menus    Menu[]
  orders   Order[]
  ratings  RestaurantRating[]
  avgRating Float?

  @@map("restaurants")
}

model Menu {
  id           String   @id @default(cuid())
  restaurantId String
  name         String
  description  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  dishes     Dish[]

  @@map("menus")
}

model Dish {
  id          String   @id @default(cuid())
  menuId      String
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  imageUrl    String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  menu       Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  ratings    DishRating[]
  avgRating  Float?

  @@map("dishes")
}

model Order {
  id            String      @id @default(cuid())
  customerId    String
  restaurantId  String
  addressId     String
  status        OrderStatus @default(PENDING)
  subtotal      Decimal     @db.Decimal(10, 2)
  deliveryFee   Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  notes         String?
  estimatedTime Int? // minutes
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  customer   User        @relation(fields: [customerId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  address    Address     @relation(fields: [addressId], references: [id])
  items      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  orderId  String
  dishId   String
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  notes    String?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dish  Dish  @relation(fields: [dishId], references: [id])

  @@map("order_items")
}

model RestaurantRating {
  id           String   @id @default(cuid())
  userId       String
  restaurantId String
  rating       Int      @db.SmallInt // 1-5
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@unique([userId, restaurantId])
  @@map("restaurant_ratings")
}

model DishRating {
  id        String   @id @default(cuid())
  userId    String
  dishId    String
  rating    Int      @db.SmallInt // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  dish Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)

  @@unique([userId, dishId])
  @@map("dish_ratings")
}